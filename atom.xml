<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>INSHEEP</title>
  
  <subtitle>INSHEEP&#39;s Blog</subtitle>
  <link href="http://reallydance.gitee.io/insheep.gitee.io/atom.xml" rel="self"/>
  
  <link href="http://reallydance.gitee.io/insheep.gitee.io/"/>
  <updated>2021-08-25T10:08:05.282Z</updated>
  <id>http://reallydance.gitee.io/insheep.gitee.io/</id>
  
  <author>
    <name>INSHEEP</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot搭建个人博客[1]-环境搭建</title>
    <link href="http://reallydance.gitee.io/insheep.gitee.io/2021/08/25/SpringBoot%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-1/"/>
    <id>http://reallydance.gitee.io/insheep.gitee.io/2021/08/25/SpringBoot%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-1/</id>
    <published>2021-08-25T07:00:00.000Z</published>
    <updated>2021-08-25T10:08:05.282Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【1】环境搭建"><a href="#【1】环境搭建" class="headerlink" title="【1】环境搭建"></a>【1】环境搭建</h1><h2 id="新建SprintBoot项目"><a href="#新建SprintBoot项目" class="headerlink" title="新建SprintBoot项目"></a>新建SprintBoot项目</h2><p>首先选要用的依赖：Web、Thymeleaf模块、Mybaits、MySQL驱动、devtools热部署</p><img src="/insheep.gitee.io/2021/08/25/SpringBoot%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-1/new_project.png" class title="依赖勾选"><p>整完之后，看Maven里面的依赖，看到如下：</p><img src="/insheep.gitee.io/2021/08/25/SpringBoot%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-1/maven_Dep.png" class title="Maven依赖"><hr><h2 id="SpringBoot配置文件"><a href="#SpringBoot配置文件" class="headerlink" title="SpringBoot配置文件"></a>SpringBoot配置文件</h2><p>此处使用yaml格式，并且分为dev开发环境和pro生产环境，所以需要有3个yaml文件，一个是默认的application.yaml文件，其余为application-dev,yaml，application-pro.yaml<br>刚开始需要使用dev环境，配置spring.profiles.active = dev</p><h3 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h3><p>dev：8000；pro：9000</p><h3 id="连接数据库常规配置"><a href="#连接数据库常规配置" class="headerlink" title="连接数据库常规配置"></a>连接数据库常规配置</h3><p>也就是：driver、url、username、password那几个玩意</p><h3 id="mybatis配置"><a href="#mybatis配置" class="headerlink" title="mybatis配置"></a>mybatis配置</h3><p>mybatis配置文件路径：记得要写classpath:不然会报错找不到</p><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><p>dev环境和pro环境分别配置日志保存至log下的blog-dev.log，blog-pro.log</p><h3 id="日志等级"><a href="#日志等级" class="headerlink" title="日志等级"></a>日志等级</h3><p>dev环境下需要查看更多的日志，所以root: info，自己包下为debug<br><br>pro环境下不需要查看太多的认知，则root: warn，自己包下为info</p><h3 id="Thymeleaf模式"><a href="#Thymeleaf模式" class="headerlink" title="Thymeleaf模式"></a>Thymeleaf模式</h3><p>设置为HTML模式</p><p>初步整体代码如下：以dev为例子，敏感信息已经替换为**，dev和pro的配置根据自己情况而定。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8000</span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql://localhost:**/**?useUnicode=true&amp;characterEncoding=utf-8</span><br><span class="line">    username: **</span><br><span class="line">    password: **</span><br><span class="line">mybatis:</span><br><span class="line">  config-location: classpath:mybatis-config.xml</span><br><span class="line">logging:</span><br><span class="line">  level:</span><br><span class="line">    root: info</span><br><span class="line">    com.**: debug</span><br><span class="line">  file:</span><br><span class="line">    path: log</span><br><span class="line">    name: **</span><br></pre></td></tr></table></figure><hr><p>正常来说，现在启动项目，已经可以跑起来了，访问对应端口，只要是<code>404</code>的界面，那就证明到现在为止没有大问题，<code>404</code>只是现在项目里面没有对应的资源，所以才显示找不到</p><hr><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="SpringBoot自带的异常处理"><a href="#SpringBoot自带的异常处理" class="headerlink" title="SpringBoot自带的异常处理"></a>SpringBoot自带的异常处理</h3><p>当系统中出现4xx或5xx之类的错误时，ErrorPageCustomizer就会生效（定制错误的响应规则）；就会来到/error请求；就会被BasicErrorController处理。</p><h3 id="定制异常界面"><a href="#定制异常界面" class="headerlink" title="定制异常界面"></a>定制异常界面</h3><p>根据SpringBoot这个处理异常的特性，可以在<code>resources/templates</code>下创建一个<code>error</code>包，并且新建对应错误响应码的html文件，当系统发生错误时，会自动地响应相应的状态码的文件给用户。如下图：</p><img src="/insheep.gitee.io/2021/08/25/SpringBoot%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-1/error_img.png" class title="项目结构"><p>例如发生404错误时，会跳转到我们自己写的这个<code>404.html</code>文件去。</p><h3 id="controller层测试"><a href="#controller层测试" class="headerlink" title="controller层测试"></a>controller层测试</h3><p>在java.com.**下创建新的包，叫做controller，专门放controller的东西。写一个返回首页的controller：IndexController<br>方法中返回的”index”会经过视图解析器，得到对应的视图对象，最后返回给客户端的是index.html界面(在templates下新建一个index.html文件)<br><br>此处前端访问<code>localhost:8000/index</code>时，会被这个controller的test()方法捕获，然后经过这个方法返回一个<code>&quot;index&quot;</code>，经过<code>视图解析器</code>之后，就会给前端返回对应的<code>index.html</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/index&quot;)</span><br><span class="line">public class IndexController &#123;</span><br><span class="line">    @RequestMapping(&quot;/&quot;)</span><br><span class="line">    public String test()&#123;</span><br><span class="line">        return &quot;index&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异常界面测试"><a href="#异常界面测试" class="headerlink" title="异常界面测试"></a>异常界面测试</h3><p>访问一个不存在的资源时，会跳到我们自己写的404界面，500错误也是同理。</p><img src="/insheep.gitee.io/2021/08/25/SpringBoot%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-1/404_show.png" class title="异常界面"><h3 id="统一异常处理"><a href="#统一异常处理" class="headerlink" title="统一异常处理"></a>统一异常处理</h3><p>这里主要是为了拦截错误之后，跳转到我们自己写的错误响应页面。<br><br>这就需要一个<mark class="hl-label default">全局异常处理的一个类</mark> ，用来拦截整个工程产生的异常，方便我们以后管理。<br><br>全局异常处理器需要用到一个注解：<code>@ControllerAdvice</code>，表示这个类会拦截全部的异常。<br><br>在这里类的内部写一个<code>ExceptionHandler</code>方法，加上注解：<code>@ExceptionHandler</code>，表示这个方法专门接收Exception的异常(其实也就是全部异常了)，当系统发出Exception异常时，会进入到这个方法处理。这个方法内的逻辑：需要返回一个<code>ModelAndView</code>，用来给用户返回一个具体的error的html页面。并且需要记录日志。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@ControllerAdvice //全局异常处理器</span><br><span class="line">public class ExceptionInterceptor &#123;</span><br><span class="line">    //获取日志</span><br><span class="line">    private Logger logger = LoggerFactory.getLogger(this.getClass());</span><br><span class="line">    @ExceptionHandler(Exception.class)  //拦截Exception异常</span><br><span class="line">    public ModelAndView exceptionHandler(HttpServletRequest request, Exception e) &#123;</span><br><span class="line">        logger.error(&quot;Request URL : &#123;&#125;, Exception: &#123;&#125;&quot;, request.getRequestURL(), e);//记录日志</span><br><span class="line">        ModelAndView modelAndView = new ModelAndView();</span><br><span class="line">        modelAndView.setViewName(&quot;error/error&quot;); //返回到error包下的error.html界面</span><br><span class="line">        return modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>至此，我们完成了环境的搭建，以及对异常的统一处理和日志记录，下一篇就要开始写<mark class="hl-label default">后台管理模块</mark> 的代码哩！(今天的写的比较粗略…)</p>]]></content>
    
    
    <summary type="html">开始打代码啦!</summary>
    
    
    
    <category term="SpringBoot搭建个人博客" scheme="http://reallydance.gitee.io/insheep.gitee.io/categories/SpringBoot%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="学习" scheme="http://reallydance.gitee.io/insheep.gitee.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="总结" scheme="http://reallydance.gitee.io/insheep.gitee.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot搭建个人博客[0]-前言</title>
    <link href="http://reallydance.gitee.io/insheep.gitee.io/2021/08/25/SpringBoot%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-0/"/>
    <id>http://reallydance.gitee.io/insheep.gitee.io/2021/08/25/SpringBoot%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-0/</id>
    <published>2021-08-25T06:56:04.000Z</published>
    <updated>2021-08-25T08:59:52.784Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【0】前言"><a href="#【0】前言" class="headerlink" title="【0】前言"></a>【0】前言</h1><p><strong><mark class="hl-label red">注意：这里所说SpringBoot搭建的博客，并非现在所呈现的博客，只是一个具备基本功能并且界面简陋的博客。而且不是教程，而是自己的总结，所以难免有遗漏。</mark> </strong></p><h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><p>之前做的一个项目，也是搭建一个个人博客，不过后端的模块是自己一点一点打的，增删改查，数据封装，控制器处理等，前端用的是网上找的模板，不过相比于Hexo的butterfly主题，之前做的那个真的是一言难尽……</p><p>不过收获还是蛮多的，虽然前端的界面不是自己打的，但是数据的交互和处理都是自己一个人做，所以还不能说是<code>全栈</code>哈哈，不过在做的时候，前端花的时间也不少，主要还是没系统学过前端的缘故。</p><p>虽然最后还是选择用这种方便的框架来呈现自己的博客，但是学习过程遇到的问题和解决方案还是很值得总结和记录的，主要是总结<code>后端</code>的部分。</p><h2 id="技术栈与环境"><a href="#技术栈与环境" class="headerlink" title="技术栈与环境"></a>技术栈与环境</h2><ul><li>后端：SpringBoot、Mybatis、Thymeleaf引擎、MySQL</li><li>前端：Semantic UI框架</li><li>运行：IDEA、Maven3、jdk8</li></ul><h2 id="需要实现的功能"><a href="#需要实现的功能" class="headerlink" title="需要实现的功能"></a>需要实现的功能</h2><ul><li><strong>后台管理部分(管理员)</strong><ul><li>博客的查询、添加、删除、修改</li><li>博客分类的查询、添加、删除、修改</li></ul></li><li><strong>展示部分(访客)</strong><ul><li>首页展示</li><li>博客详细内容页面展示</li><li>博客评论功能的实现(难点)</li></ul></li><li><strong>云部署</strong></li></ul><h2 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h2><ul><li>首页<img src="/insheep.gitee.io/2021/08/25/SpringBoot%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-0/show_index.png" class title="访客首页"></li><li>分类页<img src="/insheep.gitee.io/2021/08/25/SpringBoot%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-0/show_types.png" class title="分类页"></li><li>搜索页<img src="/insheep.gitee.io/2021/08/25/SpringBoot%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-0/show_search.png" class title="搜索页"></li><li>博客详细页-1<img src="/insheep.gitee.io/2021/08/25/SpringBoot%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-0/show_detail.png" class title="详细页内容部分"></li><li>博客详细页-2<img src="/insheep.gitee.io/2021/08/25/SpringBoot%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-0/show_detail_comments.png" class title="详细页部分版权评论部分"></li><li>博客详细页-3<img src="/insheep.gitee.io/2021/08/25/SpringBoot%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-0/show_detail_footer.png" class title="详细页底部部分"></li><li>后台管理-博客管理<img src="/insheep.gitee.io/2021/08/25/SpringBoot%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-0/admin_blog.png" class title="博客管理"></li><li>后台管理-博客编辑<img src="/insheep.gitee.io/2021/08/25/SpringBoot%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-0/admin_blog_update.png" class title="博客编辑"></li><li>后台管理-分类管理<img src="/insheep.gitee.io/2021/08/25/SpringBoot%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-0/admin_types.png" class title="分类管理"></li><li>后台管理-分类编辑<img src="/insheep.gitee.io/2021/08/25/SpringBoot%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-0/admin_types_update.png" class title="分类编辑"></li></ul><h2 id="参考学习"><a href="#参考学习" class="headerlink" title="参考学习"></a>参考学习</h2><p><a href="https://www.bilibili.com/video/BV1nE411r7TF?from=search&seid=13027902904823819594">参考视频</a><br><a href="https://onestar.newstar.net.cn/">参考博客</a></p>]]></content>
    
    
    <summary type="html">想说些事儿...</summary>
    
    
    
    <category term="SpringBoot搭建个人博客" scheme="http://reallydance.gitee.io/insheep.gitee.io/categories/SpringBoot%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="学习" scheme="http://reallydance.gitee.io/insheep.gitee.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="总结" scheme="http://reallydance.gitee.io/insheep.gitee.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>每日总结-8/25</title>
    <link href="http://reallydance.gitee.io/insheep.gitee.io/2021/08/25/%E6%AF%8F%E6%97%A5%E6%80%BB%E7%BB%93-8-25/"/>
    <id>http://reallydance.gitee.io/insheep.gitee.io/2021/08/25/%E6%AF%8F%E6%97%A5%E6%80%BB%E7%BB%93-8-25/</id>
    <published>2021-08-25T00:34:48.000Z</published>
    <updated>2021-08-25T06:29:18.645Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【每日总结】-8-25"><a href="#【每日总结】-8-25" class="headerlink" title="【每日总结】-8/25"></a>【每日总结】-8/25</h1><h2 id="早上"><a href="#早上" class="headerlink" title="早上"></a>早上</h2><ul><li>188.买卖股票的最佳时机Ⅳ：动态规划，和123差不多，不过时买卖k次，就把dp数组变为2*k+1列即可，不过在遍历的时候，就要判断奇偶性，奇数就是买入的操作，偶数就是卖出的操作。</li><li>SQL8.找出所有员工当前薪水的情况：注意是情况，所以需要去重<code>DISTINCT</code>，逆序排序也就是从大到小：<code>ORDER BY ** DESC</code></li><li>SQL10.获取所有非领导的员工emp_no：要用子查询，先查出领导表中全部的d.emp_no，然后外套对员工表的查询，查e.emp_no不在(<code>NOT IN</code>)子查询里面的员工。</li></ul><hr>]]></content>
    
    
    <summary type="html">越努力越美好...</summary>
    
    
    
    <category term="每日总结" scheme="http://reallydance.gitee.io/insheep.gitee.io/categories/%E6%AF%8F%E6%97%A5%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="我" scheme="http://reallydance.gitee.io/insheep.gitee.io/tags/%E6%88%91/"/>
    
  </entry>
  
  <entry>
    <title>每日总结-8/24</title>
    <link href="http://reallydance.gitee.io/insheep.gitee.io/2021/08/24/%E6%AF%8F%E6%97%A5%E6%80%BB%E7%BB%93-8-24/"/>
    <id>http://reallydance.gitee.io/insheep.gitee.io/2021/08/24/%E6%AF%8F%E6%97%A5%E6%80%BB%E7%BB%93-8-24/</id>
    <published>2021-08-24T14:44:12.000Z</published>
    <updated>2021-08-25T06:29:21.584Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【每日总结】-8-24"><a href="#【每日总结】-8-24" class="headerlink" title="【每日总结】-8/24"></a>【每日总结】-8/24</h1><h2 id="写在前头"><a href="#写在前头" class="headerlink" title="写在前头"></a>写在前头</h2><p>这是这个博客建成以来的<mark class="hl-label default">第一篇博客</mark> ，因为晚上才弄好，剩下时间不多，但是又迫不及待地想在上面写东西，就先写一个自己之前每天都写的<strong>【每日总结】</strong>啦，作为自己学习的一个过程总结，有一些话肯定是我自己看得懂，就没有写的很清楚了。</p><hr><h2 id="早上"><a href="#早上" class="headerlink" title="早上"></a>早上</h2><ul><li>看了一下简历教程，发现简历上还是很多地方需要优化的，之后一点一点改吧。</li><li><code>122.买卖股票的最佳时机Ⅱ</code>：贪心算法或动态规划，贪心就是相邻的两个作差，是正数就添加进答案中。动态规划：dp含义和Ⅰ题一样，不过这里的递推有所不同，dp[i][0]可以是从上一个不持有股票的状态再卖出现在这支股票得到，也就是dp[i][0] = Math.max(dp[i-1][0], dp[i-1][1] - prices[i])</li><li><code>123.买卖股票的最佳时机Ⅲ</code>：动态规划，dp[i][j]表示第i天的状态j的最大金额是多少；dp需要有5列，表示5个状态：[0]不做操作，[1]第一次买入,[2]第一次卖出，[3]第二次买入，[4]第二次卖出。</li><li><code>SQL5.查找所有员工的xxx信息</code>：返回结果可能有dept_no为空的情况，需要employees LEFT JOIN dept_emp，A左联B，B中即使没有对应的数据，也会返回NULL。</li><li><code>SQL7.查找薪水记录超过15次的员工</code>：分组计数，GROUP BY分组，COUNT计数，HAVING一般和GROUP BY一起使用，和WHERE的作用差不多也是判断过滤条件</li></ul><hr><h2 id="下午"><a href="#下午" class="headerlink" title="下午"></a>下午</h2><ul><li>整个下午用来搭建这个博客，虽然看起来很简单，但是还是有很多细节要注意的，比如Git的一些操作还不是很熟练。</li><li>博客用的是<code>Hexo</code>框架来搭建的，还特意去换了个喜欢的”皮肤”，优雅永不过时！</li></ul><hr><h2 id="晚上"><a href="#晚上" class="headerlink" title="晚上"></a>晚上</h2><ul><li>还花了一段时间来看<code>butterfly</code>的文档，把一些信息改成自己的，顺带熟悉了一下操作，有自己一个博客，感觉有点成就感，不过内容还是要慢慢积累。</li><li>当然是每天的面经，因为晚上时间不多，就看了一下volatile关键字，时间不多，就先写个大概…</li></ul><hr><h2 id="蜻蜓点水-volatile"><a href="#蜻蜓点水-volatile" class="headerlink" title="蜻蜓点水-volatile"></a>蜻蜓点水-volatile</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>保证变量的<strong>可见性</strong>，但是不保证原子性。</li><li>禁止指令重排。<h3 id="什么是可见性？"><a href="#什么是可见性？" class="headerlink" title="什么是可见性？"></a>什么是可见性？</h3></li><li>简单的来说：就是多线程情况下，线程A对共享变量的修改操作，线程B可以看得见。</li><li>复杂点：每个线程拿到<code>共享数据</code>时，都会在线程的<code>本地内存</code>中拷贝一份相同的数据，然后对这个数据进行操作，操作完之后再写进<code>主内存</code>。在这个过程中，当A线程操作完拷贝数据后但未写入主存的这个时间段，B线程时没办法知道A线程对这个共享数据的修改。</li><li>配合下面这个图很好理解<img src="/insheep.gitee.io/2021/08/24/%E6%AF%8F%E6%97%A5%E6%80%BB%E7%BB%93-8-24/pic1.png" class title="示意图"></li></ul><h3 id="什么是指令重排？"><a href="#什么是指令重排？" class="headerlink" title="什么是指令重排？"></a>什么是指令重排？</h3><ul><li>我的理解就是遍历器和优化器为了优化程序性能，对指令的执行顺序进行重新排序，不过重排有一定的规则，这里就先不写出来了。</li></ul><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li>JVM内部采用一个叫做<code>内存屏障</code>来实现，在汇编代码中，有volatile修饰的变量语句之前会有一个lock的前缀指令，它的作用就是<code>内存屏障</code>。<ul><li>屏障之前的指令无法排到屏障之后，反之依然，就像名字一样，是一个屏障，两边都无法越过这个屏障。(换言之，当执行到这个语句时，前面的所有语句必定都执行完毕，后面的语句也一定还没执行)</li><li>如果一个线程对本地内存数据进行了修改，就立刻写入<code>主内存</code>，并且使得其他线程的本地缓存无效。</li></ul></li></ul><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>里面的部分只是作为我学习过程的总结，并不严谨，甚至有可能会有错漏，如有错误，还请指出我的错误…</p>]]></content>
    
    
    <summary type="html">第一篇正经的博客，没啥写就写【每日总结吧】！</summary>
    
    
    
    <category term="每日总结" scheme="http://reallydance.gitee.io/insheep.gitee.io/categories/%E6%AF%8F%E6%97%A5%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="我" scheme="http://reallydance.gitee.io/insheep.gitee.io/tags/%E6%88%91/"/>
    
  </entry>
  
  <entry>
    <title>Hexo butterfly 主题的学习测试</title>
    <link href="http://reallydance.gitee.io/insheep.gitee.io/2021/08/24/test/"/>
    <id>http://reallydance.gitee.io/insheep.gitee.io/2021/08/24/test/</id>
    <published>2021-08-24T09:53:25.000Z</published>
    <updated>2021-08-25T05:56:34.060Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><h2 id="引入链接"><a href="#引入链接" class="headerlink" title="引入链接"></a>引入链接</h2><p><img src="https://w.wallhaven.cc/full/6o/wallhaven-6o2m9q.jpg"></p><h2 id="引用本地"><a href="#引用本地" class="headerlink" title="引用本地"></a>引用本地</h2><img src="/insheep.gitee.io/2021/08/24/test/pic1.png" class title="本地图片"><h2 id="指定大小"><a href="#指定大小" class="headerlink" title="指定大小"></a>指定大小</h2><img class="inline-img" src="https://i.loli.net/2021/03/19/5M4jUB3ynq7ePgw.png" style="height:50px"><h1 id="图库测试"><a href="#图库测试" class="headerlink" title="图库测试"></a>图库测试</h1><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src="https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png" alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">壁纸</div>  <p>收藏的一些壁纸</p>  <a href="/insheep.gitee.io/www.baidu.com"></a>  </figcaption>  </figure>  </div><h1 id="Markdown-All-in-One插件-快捷键"><a href="#Markdown-All-in-One插件-快捷键" class="headerlink" title="Markdown-All-in-One插件 快捷键"></a>Markdown-All-in-One插件 快捷键</h1><ul><li>Key    Command</li><li>Ctrl + B    粗体k</li><li>Ctrl + I    斜体</li><li>Alt + S    删除线</li><li>Ctrl + Shift + ]    标题(uplevel)</li><li>Ctrl + Shift + [    标题(downlevel)</li><li>Ctrl + M    Toggle math environment</li><li>Alt + C    Check/Uncheck task list item</li></ul>]]></content>
    
    
    <summary type="html">全是测试用例...</summary>
    
    
    
    
    <category term="测试" scheme="http://reallydance.gitee.io/insheep.gitee.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
</feed>
